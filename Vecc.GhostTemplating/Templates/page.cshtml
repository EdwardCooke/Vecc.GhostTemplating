@using Vecc.GhostTemplating
@using Microsoft.Extensions.Options

@model Page
@inject IOptions<TemplatingOptions> templateOptions

@{
    Layout = "/Templates/layout.cshtml";
    var options = templateOptions.Value;
    var classes = $"article post article-{Model.Slug}";
    if (string.IsNullOrWhiteSpace(Model.FeatureImage))
    {
        classes += " no-image";
    }
}

<main id="site-main" class="site-main">
    <article class="@classes">
        <header class="article-header gh-canvas">
            <h1 class="article-title">
                @Model.Title
            </h1>
            @if (!string.IsNullOrWhiteSpace(Model.FeatureImage))
            {
                <img src="@Model.FeatureImage"
                    alt="@Model.FeatureImageAlt" />
                @if (!string.IsNullOrWhiteSpace(Model.FeatureImageCaption))
                {
                    <figcaption>@Model.FeatureImageCaption</figcaption>
                }
            }
        </header>
        <section class="gh-content gh-canvas">
            @Html.Raw(Model.HTML)
        </section>
    </article>
</main>

@section head
{
    <script type="application/ld+json">
{
    "@@context": "https://schema.org",
    "@@type": "Article",
    "publisher": {
        "@@type": "Organization",
        "name": @Html.Raw(options.SiteName.EscapeForJson()),
        "url": @Html.Raw(Model.Settings.Url.EscapeForJson()),
        "logo": {
            "@@type": "ImageObject",
            "url": @Html.Raw((Model.Settings.Url + options.FavoriteIcon).EscapeForJson())",
            "width": 48,
            "height": 48
        }
    },
    "author": {
        "@@type": "Person",
        "name": @Html.Raw(Model.PrimaryAuthor?.Name.EscapeForJson()),
        "image": {
            "@@type": "ImageObject",
            "url": @Html.Raw(Model.PrimaryAuthor.ProfileImage.EscapeForJson()),
            "width": 250,
            "height": 250
        },
        "sameAs": []
    },
    "headline": @Html.Raw(Model.Title.EscapeForJson()),
    "url": @Html.Raw((Model.Settings.Url + Model.Slug + "/").EscapeForJson()),
    @if (Model.PublishedAt.HasValue)
    {
    <TEXT>"datePublished": @Html.Raw(Model.PublishedAt?.ToUniversalTime().ToString("O").EscapeForJson()),
        </TEXT>
    }
    "dateModified": @Html.Raw(Model.UpdatedAt.ToUniversalTime().ToString("O").EscapeForJson()),
    @if (Model.Tags != null && Model.Tags.Any())
    {
    <TEXT>"keywords": @Html.Raw(string.Join(", ", Model.Tags.Select(x=>x.Name)).EscapeForJson()),
        </TEXT>
    }
    "description": @Html.Raw((Model.MetaDescription ?? Model.PlainText ?? Model.Excerpt).EscapeForJson()),
    "mainEntityOfPage": {
        "@@type": "WebPage",
        "@@id": @Html.Raw(Model.Settings.Url.EscapeForJson())
    }
}
    </script>
}