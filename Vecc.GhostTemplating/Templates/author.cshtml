@using Vecc.GhostTemplating
@using Microsoft.Extensions.Options

@model Vecc.GhostTemplating.Author
@inject IOptions<TemplatingOptions> templateOptions

@{
    Layout = "/Templates/layout.cshtml";
    var options = templateOptions.Value;
}

<main id="site-main" class="site-main outer">
    <div class="inner posts">
        <div class="post-feed">
            <section class="post-card post-card-large">
                <div class="post-card-content">
                    <div class="post-card-content-link">
                        <img class="author-profile-pic" src="@Model.ProfileImage" alt="@Model.Name">
                        <header class="post-card-header">
                            <h2 class="post-card-title">@Model.Name</h2>
                        </header>
                        <div class="post-card-excerpt">@Model.Bio</div>
                        <footer class="author-profile-footer">
                            <div class="author-profile-meta">
                                @if (!string.IsNullOrWhiteSpace(Model.Twitter))
                                {
                                    <a class="author-profile-social-link" href="https://www.twitter.com/@Model.Twitter" target="_blank" rel="noopener">
                                        @{ await Html.RenderPartialAsync("icons/twitter.cshtml"); }
                                    </a>
                                }
                                @if (!string.IsNullOrWhiteSpace(Model.Facebook))
                                {
                                    <a class="author-profile-social-link" href="https://www.facebook.com/@Model.Facebook" target="_blank" rel="noopener">
                                        @{ await Html.RenderPartialAsync("icons/facebook.cshtml"); }
                                    </a>
                                }
                            </div>
                        </footer>
                    </div>
                </div>
            </section>
            @for (var index = 0; index < Model.PostsToDisplay.Length; index++)
            {
                await Html.RenderPartialAsync("post-card.cshtml", new PostCard { Index = index, IsIndex = false, IsPaged = false, Post = Model.PostsToDisplay[index] });
            }
        </div>
    </div>
</main>


@section head
    {
    <script type="application/ld+json">
        {
            "@@context": "https://schema.org",
            "@@type": "Person",
            "sameAs": [
        @if (!string.IsNullOrWhiteSpace(Model.Facebook))
        {
            <text>@Html.Raw($"https://www.facebook.com/{Model.Facebook}".EscapeForJson())</text>
            if (!string.IsNullOrWhiteSpace(Model.Twitter))
            {
                <text>,</text>
            }
        }
        @if (!string.IsNullOrWhiteSpace(Model.Twitter))
        {
            <text>@Html.Raw($"https://www.twitter.com.com/{Model.Twitter}".EscapeForJson())</text>
        }
            ],
            "name": @Html.Raw(Model.Name.EscapeForJson()),
            "url": @Html.Raw($"{Model.Settings.Url}author/@{Model.Slug}/".EscapeForJson()),
        @if (!string.IsNullOrWhiteSpace(Model.CoverImage))
        {
            <text>
                "image": {
                        "@@type": "ImageObject",
                        "url": @Html.Raw($"{Model.Settings.Url}{Model.CoverImage}".EscapeForJson())
                    },
            </text>
        }
            "mainEntityOfPage": @Html.Raw($"{Model.Settings.Url}author/@{Model.Slug}/".EscapeForJson()),
            "description": @Html.Raw(Model.Bio.EscapeForJson())
        }
        }
    </script>
    @if (Model.Previous != null)
    {
        <link rel="prev" href="@(Model.Previous)" />
    }
    @if (Model.Next != null)
    {
        <link rel="next" href="@(Model.Next)" />
    }
}
